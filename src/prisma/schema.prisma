generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  first_name       String    @db.VarChar(255)
  last_name        String    @db.VarChar(255)
  email            String    @db.VarChar(255)
  emailVerified    Boolean   @default(false)
  confirmationToken String?
  password         String    @db.VarChar(255)
  current_position String?   @db.VarChar(255)
  current_company  String?   @db.VarChar(255)
  current_location String?   @db.VarChar(255)
  phone            String?   @db.VarChar(255)
  description      String?   @db.Text
  image            String?   @db.VarChar(255)
  create_time      DateTime  @default(now()) @db.Timestamp(6)
  update_time      DateTime? @db.Timestamp(6)
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  rooms Rooms[]
  @@unique([email])
}

model Rooms { 
  id String @id @default(cuid())
  name String @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  instances Instance[]
  userId      String   
  dailyExecutionLimit Float? @default(3600.00)
  monthlyExecutionLimit Float? @default(108000.00)
  currentExecutionLimit Float? @default(0.00)
  timezone String? @default("Europe/Brussels")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id           Int      @id @default(autoincrement())
  position        String
  company      String
  location     String
  apply_link   String
  link_id      String    // Ne pas marquer comme @unique ici
  applied      Boolean   @default(false)
  added_on     DateTime  @default(now())
  applied_on   DateTime?
  userId      String    // Clé étrangère vers l'utilisateur auquel l'offre d'emploi est associée
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, link_id], name: "unique_link_id_per_user")
  @@map(name: "jobs")   // Optionnel : renommer la table si nécessaire
}

model Instance {
    id            String    @id @default(cuid())
    namespace     String
    status       String   @default("pending")
    roomId      String   
    create_time   DateTime  @default(now()) @db.Timestamp(6)
    room Rooms @relation(fields: [roomId], references: [id], onDelete: Cascade)
    configurations InstanceConfiguration[]
    @@map(name: "instances")
}

model InstanceConfiguration {
    id            String    @id @default(cuid())
    instanceId    String
    data         String
    create_time   DateTime  @default(now()) @db.Timestamp(6)
    update_time   DateTime? @db.Timestamp(6)
    instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
    @@map(name: "instance_configurations")   // Optionnel : renommer la table si nécessaire

}

model Plans {
  id String @id @default(cuid())
  name String  @default("Standard")
  monthlyPrice Float @default(0.00)
  dailyExecutionLimit Float @default(3600.00)
  monthlyExecutionLimit Float @default(108000.00)
  isUpgradable Boolean @default(true)
  started_at DateTime
  
}